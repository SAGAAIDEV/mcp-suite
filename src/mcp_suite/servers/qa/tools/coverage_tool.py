"""
Coverage tool for the SaagaLint MCP server.

This module provides a tool for analyzing code coverage and identifying
areas of code that are not covered by tests. It integrates with the MCP
server to provide a unified interface for coverage analysis.

Features:
- Analyze coverage reports generated by pytest
- Identify files and functions with low coverage
- Provide helpful instructions for improving coverage
- Generate detailed reports for specific files
"""

from mcp_suite.servers.qa import logger
from mcp_suite.servers.qa.service.coverage import process_coverage_json
from mcp_suite.servers.qa.utils.decorators import exception_handler
from mcp_suite.servers.qa.utils.git_utils import get_git_root


@exception_handler()
async def run_coverage(file_path):
    """
    Analyze code coverage for a specific file or the entire project.

    This function reads the coverage report generated by pytest and
    analyzes it to identify areas of code that are not covered by tests.

    Args:
        file_path: Path to the file to analyze, relative to the git root.
                  If None, analyzes the entire project.

    Returns:
        dict: A dictionary containing coverage results and instructions
    """
    logger.info(f"Analyzing code coverage for {file_path}")

    # Find git root directory
    git_root = get_git_root()
    logger.debug(f"Git root directory: {git_root}")

    # Process coverage data
    coverage_file = git_root / "reports" / "coverage.json"
    logger.debug(f"Coverage file: {coverage_file}")

    logger.info("Processing coverage data")
    coverage_issues = process_coverage_json(str(coverage_file), file_path)

    # If no issues found, return success
    if not coverage_issues:
        logger.info("No coverage issues found")
        return {
            "Status": "Success",
            "Message": "Great job! No coverage issues found.",
            "Instructions": (
                "Your code has excellent test coverage. " "Keep up the good work!"
            ),
        }

    # Return the first issue to fix
    logger.warning(f"Found {len(coverage_issues)} coverage issues")
    logger.debug(f"First issue: {coverage_issues[0]}")

    return {
        "Status": "Issues Found",
        "Issues": coverage_issues,
        "Instructions": (
            "Let's improve your test coverage! I've identified some areas of code "
            "that aren't covered by tests. Let's work together to write tests "
            "for these areas to ensure your code is robust and reliable."
        ),
    }
