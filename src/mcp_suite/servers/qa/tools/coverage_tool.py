"""
Coverage tool for the SaagaLint MCP server.

This module provides a tool for analyzing code coverage and identifying
areas of code that are not covered by tests. It integrates with the MCP
server to provide a unified interface for coverage analysis.

Features:
- Analyze coverage reports generated by pytest
- Identify files and functions with low coverage
- Provide helpful instructions for improving coverage
- Generate detailed reports for specific files
"""

# Remove logger imports
# from mcp_suite.servers.qa import logger as main_logger
from mcp_suite.servers.qa.service.coverage import process_coverage_json
from mcp_suite.servers.qa.utils.decorators import exception_handler
from mcp_suite.servers.qa.utils.git_utils import get_git_root

# from mcp_suite.servers.qa.utils.logging_utils import get_component_logger

# Remove logger initialization
# logger = get_component_logger("coverage")


@exception_handler()
async def run_coverage(file_path):
    """
    Analyze code coverage for a specific file or the entire project.

    This function reads the coverage report generated by pytest and
    analyzes it to identify areas of code that are not covered by tests.

    Args:
        file_path: Path to the file to analyze, relative to the git root.
                  If None, analyzes the entire project.

    Returns:
        dict: A dictionary containing coverage results and instructions
    """
    # Find git root directory
    git_root = get_git_root()

    # Process coverage data
    coverage_file = git_root / "reports" / "coverage.json"
    coverage_issues = process_coverage_json(str(coverage_file), file_path)

    # If no issues found, return success
    if not coverage_issues:
        return {
            "Status": "Success",
            "Message": "Great job! No coverage issues found.",
            "Instructions": (
                "Your code has excellent test coverage. Keep up the good work!"
            ),
        }

    # Return the first issue to fix
    issue = coverage_issues[0]

    return {
        "Coverage Issue": issue.model_dump(),
        "Instructions": (
            "Let's improve your test coverage! I've identified an area of code "
            "that needs more tests. Here's what you can do:\n\n"
            "1. Create a new test that exercises the uncovered lines\n"
            "2. Make sure your test covers all branches and conditions\n"
            "3. Run the tests again to verify improved coverage\n\n"
            "I'll help you write the tests to cover these lines."
        ),
    }
